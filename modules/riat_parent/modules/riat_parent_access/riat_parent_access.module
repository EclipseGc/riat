<?php
// $Id: riat_parent_access.module,v 1.4 2009/08/03 13:32:13 eclipsegc Exp $

/**
 * Implementation of hook_help().
 */

function riat_parent_access_help($path, $arg) {
  $output = '';
  switch ($path) {
    case 'admin/build/relationships/chid/%/access':
      $output .= '<p>'. t('A content type will, by default, inherit the same grant ID as its parent.  If you would like to allow a node to have its own access controls, you may do so here.') .'</p>';
      $output .= '<p>'. t('<strong>NOTE:</strong> Access is generally inheritted or a subset of the parent node\'s access.  The independent access type allows any user to be added regardless of the "access parentage".') .'</p>';
      return $output;
  }
}

/**
 * Implementation of hook_menu().
 */

function riat_parent_access_menu() {
  $items = array();
  $items['admin/build/relationships/chid/%riat_chid/access'] = array(
    'title callback' => 'riat_parent_access_title',
    'title arguments' => array(4),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('riat_parent_access_settings', 4),
    'access arguments' => array('manage riat access'),
    'type' => MENU_CALLBACK,
  );
  $items['riat/user_autocomplete'] = array(
    'page callback' => 'riat_parent_access_user_autocomplete',
    'page arguments' => array(NULL),
    'access arguments' => array('administer relationships'),
    'file' => 'riat_parent_access.autocomplete.inc',
    'file path' => drupal_get_path('module', 'riat_parent_access') .'/includes',
    'type' => MENU_CALLBACK,
  );
  $items['riat/user_autocomplete_save'] = array(
    'page callback' => 'riat_parent_access_user_autocomplete_save',
    'access arguments' => array('administer relationships'),
    'file' => 'riat_parent_access.autocomplete.inc',
    'file path' => drupal_get_path('module', 'riat_parent_access') .'/includes',
    'type' => MENU_CALLBACK,
  );
  $items['riat/users'] = array(
    'page callback' => 'riat_parent_access_users',
    'access arguments' => array('administer relationships'),
    'file' => 'riat_parent_access.autocomplete.inc',
    'file path' => drupal_get_path('module', 'riat_parent_access') .'/includes',
    'type' => MENU_CALLBACK,
  );
  $items['node/%node/riat/access'] = array(
    'title' => 'Access',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('riat_parent_access_riat_access', 1),
    'access callback' => 'riat_parent_access_riat_access_rules',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 20,
  );
  $items['node/%node/riat_user_access'] = array(
    'page callback' => 'riat_parent_access_user_autocomplete',
    'page arguments' => array(1),
    'access arguments' => array('administer relationships'),
    'file' => 'riat_parent_access.autocomplete.inc',
    'file path' => drupal_get_path('module', 'riat_parent_access') .'/includes',
    'type' => MENU_CALLBACK,
  );
  $items['node/%node/remove_user/%'] = array(
    'page callback' => 'riat_parent_access_user_remove',
    'page arguments' => array(1, 3),
    'access arguments' => array('administer relationships'),
    'type' => MENU_CALLBACK,
  );
  $items['riat/remove_user/%user/%'] = array(
    'page callback' => 'riat_parent_access_user_remove_hash',
    'page arguments' => array(2, 3),
    'access arguments' => array('administer relationships'),
    'type' => MENU_CALLBACK,
  );
  $items['node/%node/riat/access/rid_confirm'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('riat_parent_access_rid_confirm', 1),
    'access callback' => 'riat_parent_access_riat_access_rules',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
  );
  $items['node/%node/riat/access/chid_confirm'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('riat_parent_access_chid_confirm', 1),
    'access callback' => 'riat_parent_access_riat_access_rules',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

function riat_parent_access_title($chid) {
  return 'CHID: '. $chid->chid .' : '. ucfirst($chid->type) .' Access Settings';
}

function riat_parent_access_riat_access($form_state, $node) {
  if (user_access('change riat access type')) {
    if ($node->riat['chid']) {
      $form['chid_access_settings'] = array(
        '#title' => t('Access Settings'),
        '#type' => 'radios',
        '#options' => array(
          'inherit' => 'Inherit Parent Access',
          'independent' => 'Create Own Access'
        ),
        '#required' => TRUE,
        '#weight' => -10,
        '#prefix' => '<div id="riat_access_settings">',
        '#suffix' => '</div>',
        '#default_value' => $node->chid_access_settings,
      );
      $form['submit'] = array(
        '#type' => 'submit',
        '#value' => 'Change Access Type',
      );
    }
    elseif ($node->riat['rid'] && $node->rid_access_settings_defaults == 'optional') {
      $form['rid_access_settings'] = array(
        '#title' => t('Access Settings'),
        '#type' => 'radios',
        '#options' => array(
          'public' => 'Public Access',
          'private' => 'Create Own Access'
        ),
        '#required' => TRUE,
        '#weight' => -10,
        '#prefix' => '<div id="riat_access_settings">',
        '#suffix' => '</div>',
        '#default_value' => $node->rid_access_settings,
      );
      $form['submit'] = array(
        '#type' => 'submit',
        '#value' => 'Change Access Type',
      );
    }
    elseif ($node->riat['rid']) {
      $form['rid_access_settings'] = array(
        '#type' => 'value',
        '#value' => $node->rid_access_settings,
      );
    }
  }
  if (($node->chid_access_settings == 'independent' && !node_access_needs_rebuild()) || ($node->rid_access_settings == 'private' && !node_access_needs_rebuild() && !isset($node->chid_access_settings))) {
    $query = db_query("SELECT u.uid, u.name FROM {riat_parent_access_users} rpau LEFT JOIN {users} u ON rpau.uid = u.uid WHERE rpau.gid = %d", $node->nid);
    $table = '';
    $header = array(t('Username'), '');
    while ($result = db_fetch_object($query)) {
      $rows[] = array(l($result->name, 'user/'. $result->uid), l('remove', 'node/'. $node->nid .'/remove_user/'. $result->uid));
    }
    if (isset($rows)) {
      $table = theme('table', $header, $rows);
    }
    $form['users_access'] = array(
      '#type' => 'fieldset',
    );
    $form['users_access']['add'] = array(
      '#type' => 'textfield',
      '#title' => t('Add Users'),
      '#autocomplete_path' => 'node/'. $node->nid .'/riat_user_access',
    );
    $form['users_access']['add_button'] = array(
      '#type' => 'submit',
      '#value' => 'Add User',
    );
    $form['users_access']['users'] = array(
      '#type' => 'markup',
      '#value' => '<div id="user_access">'. $table .'</div>'
    );
  }
  elseif ($node->chid_access_settings == 'independent' && node_access_needs_rebuild() || ($node->rid_access_settings == 'private' && node_access_needs_rebuild() && !isset($node->chid_access_settings))) {
    $form['warning'] = array(
      '#type' => 'markup',
      '#value' => '<div class="messages error" style="text-align:center">Rebuilding the access permissions will allow you to add new users to this access group.</div>'
    );
  }
  return $form;
}

function riat_parent_access_riat_access_validate($form, &$form_state) {
  $node = menu_get_object();
  //chid validation
  if ($node->chid_access_settings == $form_state['values']['chid_access_settings'] && $form_state['values']['chid_access_settings'] == 'independent') {
    $chid = $node->chid ? $node->chid : $node->riat['chid'];
    $chid_settings = db_result(db_query("SELECT setting FROM {riat_parent_access_chid_settings} WHERE chid = %d", $chid));
    $user_raw = $form_state['values']['add'];
    $uid = substr($user_raw, (strpos($user_raw, 'uid:') + 4), -1);
    $form_state['user_uid'] = $uid;
    if ($chid_settings == 'optional_inh') {
      $access = riat_parent_access_get_access($node->riat_parent['id']);
      $gid = $access->gid;
      if (db_result(db_query("SELECT id FROM {riat_parent_access_users} WHERE gid = %d and uid = %d", $gid, $uid))) {
        if (!db_result(db_query("SELECT id FROM {riat_parent_access_users} WHERE gid = %d and uid = %d", $node->nid, $uid))) {
          return TRUE;
        }
        form_set_error('add',t('That user has already been granted access to this content.'));
      }
      form_set_error('add',t('That user must first be granted access to parent of this content.'));
    }
  }
  //rid validation
  if ($node->rid_access_settings == $form_state['values']['rid_access_settings'] && $form_state['values']['rid_access_settings'] == 'private') {
    $rid = $node->rid ? $node->rid : $node->riat['rid'];
    $rid_settings = db_result(db_query("SELECT setting FROM {riat_parent_access_rid_settings} WHERE rid = %d", $rid));
    $user_raw = $form_state['values']['add'];
    $uid = substr($user_raw, (strpos($user_raw, 'uid:') + 4), -1);
    $form_state['user_uid'] = $uid;
    if ($rid_settings == 'private' && db_result(db_query("SELECT id FROM {riat_parent_access_users} WHERE gid = %d and uid = %d", $node->nid, $uid))) {
      form_set_error('add',t('That user has already been granted access to this content.'));
    }
  }
}

function riat_parent_access_riat_access_submit($form, &$form_state) {
  $node = menu_get_object();
  $values = (object) $form_state['values'];
  $rid = $node->rid ? $node->rid : $node->riat['rid'];
  $chid = $node->chid ? $node->chid : $node->riat['chid'];
  //chid submission
  if ($node->chid_access_settings != $values->chid_access_settings && $values->op == 'Change Access Type') {
    $form_state['redirect'] = 'node/'. $node->nid .'/riat/access/chid_confirm';
    return;
  }
  elseif ($node->chid_access_settings == $values->chid_access_settings && $values->chid_access_settings == 'independent') {
    $access = riat_parent_access_get_access($node->nid);
    $object = new stdClass();
    $object->uid = $form_state['user_uid'];
    $object->gid = $access->gid;
    $query = db_result(db_query("SELECT id FROM {riat_parent_access_users} WHERE gid = %d AND uid = %d"), $object->gid, $object->uid);
    if ($query) {
      $object->id = $query;
      if (drupal_write_record('riat_parent_access_users', $object, 'id')) {
        drupal_set_message(t('User @user has been successfully added to grant id !gid', array('@user' => $form_state['user_uid'], '!gid' => $object->gid)));
      }
    }
    else {
      if (drupal_write_record('riat_parent_access_users', $object)) {
        drupal_set_message(t('User @user has been successfully added to grant id !gid', array('@user' => $form_state['user_uid'], '!gid' => $object->gid)));
      }
    }
  }
  //rid submission
  if (isset($values->rid_access_settings) && $node->rid_access_settings != $values->rid_access_settings && $values->op == 'Change Access Type') {
    $form_state['redirect'] = 'node/'. $node->nid .'/riat/access/rid_confirm';
    return;
  }
  elseif ($node->rid_access_settings == $values->rid_access_settings && $values->rid_access_settings == 'private') {
    $access = riat_parent_access_get_access($node->nid);
    $object = new stdClass();
    $object->uid = $form_state['user_uid'];
    $object->gid = $access->gid;
    $query = db_result(db_query("SELECT id FROM {riat_parent_access_users} WHERE gid = %d AND uid = %d"), $object->gid, $object->uid);
    if ($query) {
      $object->id = $query;
      if (drupal_write_record('riat_parent_access_users', $object, 'id')) {
        drupal_set_message(t('User @user has been successfully added to grant id !gid', array('@user' => $form_state['user_uid'], '!gid' => $object->gid)));
      }
    }
    else {
      if (drupal_write_record('riat_parent_access_users', $object)) {
        drupal_set_message(t('User @user has been successfully added to grant id !gid', array('@user' => $form_state['user_uid'], '!gid' => $object->gid)));
      }
    }
  }
  // add elseif for the origin if w/ a different op.
}

function riat_parent_access_change_access_type_form() {
  drupal_set_message('By changing the status of this node, you will be required to rebuild node access for all child nodes of this node.  This will be handled automatically through a batch process that will occur immediately after confirming this screen.  <strong>All nodes that depend on this node to determine their own access controls (either inherited or dependent subsets) will be reset to inheritting this nodes access controls.</strong> In the case of setting this node public, that will make all of these nodes public as well.  If you are making this node private, all dependent nodes will depend on it for access controls.', 'warning');
  $form = array();
  $form['confirm'] = array(
    '#type' => 'submit',
    '#value' => 'Confirm',
  );
  $form['cancel'] = array(
    '#type' => 'markup',
    '#value' => l('cancel', 'node/'. $node->nid .'/riat/access'),
  );
  return $form;
}

function riat_parent_access_rid_confirm($form_state, $node) {
  $form = riat_parent_access_change_access_type_form();
  return $form;
}

function riat_parent_access_rid_confirm_submit($form, &$form_state) {
  drupal_get_messages();
  $node = menu_get_object();
  if ($node->rid_access_settings == 'private') {
    $node->rid_access_settings = 'public';
  }
  else {
    $node->rid_access_settings = 'private';
  }
  node_save($node);
  if ($node->rid_access_settings == 'public') {
    db_query("DELETE FROM {riat_parent_access_users} WHERE gid = %d", $node->nid);
  }
  riat_parent_access_descendants_access_rebuild($node->nid);
  $form_state['redirect'] = 'node/'. $node->nid .'/riat/access';
}

function riat_parent_access_chid_confirm($form_state, $node) {
  $form = riat_parent_access_change_access_type_form();
  return $form;
}

function riat_parent_access_chid_confirm_submit($form, &$form_state) {
  drupal_get_messages();
  $node = menu_get_object();
  if ($node->chid_access_settings == 'independent') {
    $node->chid_access_settings = 'inherit';
  }
  else {
    $node->chid_access_settings = 'independent';
  }
  node_save($node);
  if ($node->chid_access_settings == 'inherit') {
    db_query("DELETE FROM {riat_parent_access_users} WHERE gid = %d", $node->nid);
  }
  riat_parent_access_descendants_access_rebuild($node->nid);
  $form_state['redirect'] = 'node/'. $node->nid .'/riat/access';
}

function riat_parent_access_descendants_access_rebuild($nid) {
  $results = db_query("SELECT rrd.did FROM {riat_relationships_descendants} rrd LEFT JOIN {riat_parent_access_nid_settings} rpans ON rrd.did = rpans.nid WHERE rrd.nid = %d ORDER BY rpans.depth", $nid);
  $batch = array(
    'title' => $form_state['values']['op'],
    'progress_message' => 'Reparenting @current of @total.',
    'operations' => array(),
    'finished' => '',
    'file' => drupal_get_path('module', 'riat_parent_access') .'/includes/riat_parent_access_rebuild.inc',
  );
  while ($result = db_fetch_object($results)) {
    $batch['operations'][] = array('riat_parent_access_acquire_grants', array($result->did, TRUE));
  }
  batch_set($batch);
}

function riat_parent_access_find_dependent_chids(&$results = array(), $rid, $pchid = 0) {
  $query = db_query("SELECT rc.chid, rpacs.setting FROM {riat_chain} rc LEFT JOIN {riat_parent_access_chid_settings} rpacs ON rc.chid = rpacs.chid WHERE rc.rid = %d AND rc.pchid = %d AND (rpacs.setting = 'optional_inh' || rpacs.setting = 'inherit')", $rid, $pchid);
  while ($result = db_fetch_object($query)) {
    $results[] = array('chid' => $result->chid, 'setting' => $result->setting);
    riat_parent_access_find_dependent_chids($results, $rid, $result->chid);
  }
}

function riat_parent_access_user_remove($node, $uid) {
  $results = array();
  $chid = $node->riat['chid'] ? $node->riat['chid'] : 0;
  riat_parent_access_find_dependent_chids($results, $node->riat['rid'], $chid);
  $values[] = $node->nid;
  foreach ($results as $key => $result) {
    if ($result['setting'] != 'inherit') {
      $results[$key] = $results[$key]['chid'];
      $values[] = $results[$key]['chid'];
    }
    else {
      unset($results[$key]);
    }
  }
  if ($results) {
    $query = db_query("SELECT did FROM {riat_relationships_descendants} WHERE nid = %d AND chid IN (". db_placeholders($results) .")", $values);
    $gids = TRUE;
  }
  $results = array();
  $values = array();
  $values[] = $uid;
  $values[] = $node->nid;
  if ($gids) {
    while ($result = db_fetch_object($query)) {
      $results[] = $result->did;
      $values[] = $result->did;
    }
  }
  $results[] = $node->nid;
  db_query("DELETE FROM {riat_parent_access_users} WHERE uid = %d AND gid IN (". db_placeholders($results) .")", $values);
  drupal_goto('node/'. $node->nid .'/riat/access');
}

function riat_parent_access_user_remove_hash($user, $hash) {
  db_query("DELETE FROM {riat_parent_access_staging_access} WHERE uid = %d AND hash = '%s'", $user->uid, $hash);
}

/**
 * Implementation of the hook_perm().
 */

function riat_parent_access_perm() {
  return array('change riat access type', 'manage riat access', 'access all parent nodes', 'edit all parent nodes');
}

/**
 * A form for managing each individual chain's access defaults.
 * Invoked via hook_menu().
 */

function riat_parent_access_settings($form_state, $chid) {
  $form = array();
  $form['chid'] = array(
    '#type' => 'value',
    '#value' => $chid,
  );
  $form['access'] = array(
    '#title' => t('Access Definition'),
    '#description' => t('Individual Chain Links within a given relationship chain can have their own access controls as required.  <strong>Forced Inheritance</strong> is the default and will always take the same grant id as its direct parent.  If the parent is public (i.e. gid 0) then the child will be public as we. <strong>Optional Inheritance</strong> will allow you to inherit form your parent or define your own grant id.  Users who have access will be a subset of the parent\'s users. <strong>Optional Independence</strong> allows you to specify anyone as a member of that nodes grant id, regardless of the parent\'s access setting.  This particular setting can allow individuals to have access to items mid chain even though they may not have access to the patriarch of the chain itself.  Use with care.'),
    '#type' => 'radios',
    '#options' => array(
      'inherit' => 'Forced Inherit',
      'optional_inh' => 'Optional Inherit',
      'optional_ind' => 'Optional Independent',
    ),
    '#default_value' => riat_parent_access_chid_settings($chid->chid),
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Save',
  );
  return $form;
}

function riat_parent_access_settings_submit($form, &$form_state) {
  $values = (object) $form_state['values'];
  $defaults = new stdClass();
  $defaults->chid = $values->chid->chid;
  $defaults->setting = $values->access;
  drupal_write_record('riat_parent_access_chid_settings', $defaults, 'chid');
  $rid = riat_load($values->chid->rid);
  $form_state['redirect'] = 'admin/build/relationships/'. $rid->context .'/chain/'. $rid->rid;
  node_access_needs_rebuild('TRUE');
}

function riat_parent_access_chid_defaults($form, &$form_state) {
  $values = (object) $form_state['values'];
  $defaults = new stdClass();
  $defaults->chid = $values->chid->chid;
  $defaults->setting = 'inherit';
  drupal_write_record('riat_parent_access_chid_settings', $defaults);
}

function riat_parent_access_chid_delete($form, &$form_state) {
  $values = (object) $form_state['values'];
  db_query("DELETE FROM {riat_parent_access_chid_settings} WHERE chid = %d", $values->chid);
}

/**
 * Implementation of hook_riat_chain_menu().
 */

function riat_parent_access_riat_chain_menu($item) {
  if (user_access('manage riat access')) {
    $options[] = array(
      'title' => 'Access Settings',
      'href' => 'admin/build/relationships/chid/'. $item['chid'] .'/access',
    );
    return $options;
  }
}

/**
 * Implementation of hook_riat_access_rules().
 */

function riat_parent_access_riat_access_rules($node) {
  if ($node->riat['rid'] && isset($node->rid_access_settings) && user_access('change riat access type')) {
    return TRUE;
  }
  elseif ($node->riat['chid'] && isset($node->chid_access_settings) && user_access('change riat access type')) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implementation of hook_riat_node_help().
 */

function riat_parent_access_riat_node_help() {
  $node = menu_get_object();
  if (riat_parent_access_riat_access_rules($node)) {
    $output = '<h3>'. t('Node Access:') .'</h3>';
    $output .= '<p>'. t('All nodes with an attached "Access" tab are eligible to have their own access rights.  In short this means that a unique set of users can be assigned to these single nodes, and no one else except site administrators is allowed to views these pages.') .'</p>';
    $output .= '<p>'. t('The "Access" tab will allow you to inherit the previous parent node\'s privileges or to define your own as necessary.  All nodes that are direct children of this node will inherit it\'s privileges by default if they are not eligible to be parents of other nodes in their own right.  These settings can be over ridden by administrative defaults.') .'</p>';
    return $output;
  }
}

function riat_parent_access_get_access($nid) {
  return db_fetch_object(db_query("SELECT gid, realm FROM {node_access} WHERE nid = %d AND (realm = 'riat_parent_access' OR realm = 'riat_all')", $nid));
}

function riat_parent_access_form_alter(&$form, $form_state, $form_id) {
  if ($form['#node'] && $form['#node']->type .'_node_form') {
    $node = $form['#node'];
    $picker = FALSE;
    if ($node->riat['chid'] && isset($node->riat['chid_access']) && $node->riat['chid_access'] != 'inherit') {
      $form['chid_access_settings'] = array(
        '#title' => t('Access Settings'),
        '#type' => 'radios',
        '#options' => array(
          'inherit' => 'Inherit Parent Access',
          'independent' => 'Create Own Access'
        ),
        '#required' => TRUE,
        '#weight' => -10,
        '#prefix' => '<div id="riat_access_settings">',
        '#suffix' => '</div>',
      );
      $picker = TRUE;
    }
    elseif (isset($node->riat['chid_access'])) {
      $form['chid_access_settings'] = array(
        '#type' => 'value',
        '#value' => 'inherit',
      );
    }
    if ($node->riat['rid'] && $node->riat['rid_access'] == 'optional' && !$node->riat['chid']) {
      $form['rid_access_settings'] = array(
        '#title' => t('Access Settings'),
        '#type' => 'radios',
        '#options' => array(
          'public' => 'Public',
          'private' => 'Private'
        ),
        '#required' => TRUE,
        '#weight' => -10,
        '#prefix' => '<div id="riat_access_settings">',
        '#suffix' => '</div>',
      );
      $picker = TRUE;
    }
    elseif (isset($node->riat['rid_access'])) {
      $form['rid_access_settings'] = array(
        '#type' => 'value',
        '#value' => $node->riat['rid_access'],
      );
    }
    if ($node->riat['rid'] && $node->riat['rid_access'] == 'private' && !$node->riat['chid']) {
      $picker = TRUE;
    }
    if ($picker) {
      drupal_add_js(drupal_get_path('module', 'riat_parent_access') .'/js/riat_parent_access.js');
      if (!isset($_SESSION['riat_hash'])) {
        $_SESSION['riat_hash'] = mt_rand() . time();
      }
      $form['riat_hash'] = array(
        '#type' => 'hidden',
        '#value' => $_SESSION['riat_hash'],
      );
      $form['base_path'] = array(
        '#type' => 'hidden',
        '#value' => base_path(),
      );
      $form['users_access'] = array(
        '#type' => 'fieldset',
        '#weight' => -9,
      );
      $form['users_access']['add'] = array(
        '#type' => 'textfield',
        '#title' => t('Add Users'),
        '#autocomplete_path' => 'riat/user_autocomplete',
      );
      $form['users_access']['add_button'] = array(
        '#type' => 'button',
        '#value' => 'Add User',
      );
      $form['users_access']['users'] = array(
        '#type' => 'markup',
        '#value' => '<div id="user_access_table"></div>'
      );
    }
  }
  switch ($form_id) {
    case 'riat_relationship_chain_define_form':
    case 'riat_relationship_chain_edit_form':
      $default = riat_parent_access_rid_settings($form['rid']['#value']);
      $form['access'] = array(
        '#title' => t('Access Definition'),
        '#description' => t('Relationships Chains can be defined with a number of different privacy settings.  Default is Public, which allows all users of all roles (including anonymous) to see our content.  Force Private will, by defaut, exclude all users from being able to access your content.  Users may then be added to view the chain on a per user basis.  Optionally Private allows a single chain to act in either capacity per chain instance.  This would allows some chain instances to be public, and others to be private.'),
        '#type' => 'radios',
        '#options' => array(
          'public' => 'Forced Public',
          'private' => 'Forced Private',
          'optional' => 'Optional Private',
        ),
        '#default_value' => $default ? $default : 'public',
      );
      $form['submit']['#weight'] = 50;
      $form['#submit'][] = 'riat_parent_access_rid_save';
      break;
    case 'riat_relationship_chain_delete_form':
      $form['#submit'][] = 'riat_parent_access_rid_delete';
      break;
    case 'riat_relationship_add_relationship_form':
      $form['#submit'][] = 'riat_parent_access_chid_defaults';
      break;
    case 'riat_relationship_chid_delete':
      $form['#submit'][] = 'riat_parent_access_chid_delete';
      break;
    case 'node_configure_rebuild_confirm':
      unset($form['#submit']);
      $form['#submit'][] = 'riat_parent_access_rebuild_confirm_submit';
      break;
  }
}

function riat_parent_access_rebuild_confirm_submit($form, &$form_state) {
  module_load_include('inc', 'riat_parent_access', 'includes/riat_parent_access_rebuild');
  riat_parent_access_rebuild(TRUE);
  $form_state['redirect'] = 'admin/content/node-settings';
}

function riat_parent_access_rid_save($form, &$form_state) {
  $values = (object) $form_state['values'];
  $chain_access = new stdClass();
  $chain_access->rid = $form_state['chain']->rid;
  $chain_access->setting = $values->access;
  if ($values->form_id == 'riat_relationship_chain_define_form') {
    drupal_write_record('riat_parent_access_rid_settings', $chain_access);
  }
  else {
    drupal_write_record('riat_parent_access_rid_settings', $chain_access, 'rid');
  }
  node_access_needs_rebuild('TRUE');
}

function riat_parent_access_rid_delete($form, &$form_state) {
  $values = (object) $form_state['values'];
  db_query("DELETE FROM {riat_parent_access_rid_settings} WHERE rid = %d", $values->rid);
  foreach ($form_state['chids'] as $chid) {
    db_query("DELETE FROM {riat_parent_access_chid_settings} WHERE chid = %d", $chid);
  }
}

function riat_parent_access_rid_settings($rid) {
  return db_result(db_query("SELECT setting FROM {riat_parent_access_rid_settings} WHERE rid = %d", $rid));
}

function riat_parent_access_chid_settings($chid) {
  return db_result(db_query("SELECT setting FROM {riat_parent_access_chid_settings} WHERE chid = %d", $chid));
}

function riat_parent_access_nodeapi(&$node, $op, $a3, $a4) {
  switch ($op) {
    case 'prepare':
      $rid = $node->riat['rid'];
      if ($rid) {
        $node->riat['rid_access'] = riat_parent_access_rid_settings($rid);
        $node->riat['time'] = time();
      }
      $chid = $node->riat['chid'];
      if ($chid) {
        $node->riat['chid_access'] = riat_parent_access_chid_settings($chid);
      }
      break;
    case 'load':
      $context = riat_node_context($node->nid);
      if ($context['chid']) {
        $return['chid_access_settings'] = riat_parent_access_node_access_context($node->nid);
        $return['chid_access_settings_defaults'] = riat_parent_access_chid_settings($context['chid']);
      }
      elseif ($context['rid']) {
        $return['rid_access_settings'] = riat_parent_access_node_access_context($node->nid);
        $return['rid_access_settings_defaults'] = riat_parent_access_rid_settings($context['rid']);
      }
      return $return;
    case 'insert':
      // I expect a front end on the node create screen to pass users in the format of "name [uid:#]" as a string.
      // $raw_users = explode('/r/n', $string_from_form);
      // foreach ($raw_users as $raw_user) {
      //  $node->riat_parent_access[] = substr($raw_user, (strpos($raw_user, 'uid:') + 4), -1);
      //}
      $test = $node->chid_access_settings ? $node->chid_access_settings : $node->rid_access_settings;
      $query = db_query("SELECT uid FROM {riat_parent_access_staging_access} WHERE hash = '%s'", $node->riat_hash);
      if ($query) {
        while ($result = db_fetch_object($query)) {
          $node->riat_parent_access[] = $result->uid;
        }
      }

      if (is_array($node->riat_parent_access) && ($test == 'independent' || $test == 'private')) {
        foreach($node->riat_parent_access as $uid) {
          $user = user_load(array('uid' => $uid));
          $object = new stdClass();
          $object->uid = $uid;
          $object->gid = $node->nid;
          if (drupal_write_record('riat_parent_access_users', $object)) {
            drupal_set_message(t('User @user has been successfully added to grant id !gid', array('@user' => $user->name, '!gid' => $object->gid)));
          }
        }
      }
      $hash = $_SESSION['riat_hash'];
      if ($hash) {
        unset($_SESSION['riat_hash']);
        db_query("DELETE FROM {riat_parent_access_staging_access} WHERE hash = '%s'", $hash);
      }
      // No break here so update will continue
    case 'update':
      // Determine the depth within the tree at which this node resides.
      if (is_numeric($node->riat_parent['id'])) {
        $depth = db_result(db_query("SELECT depth FROM {riat_parent_access_nid_settings} WHERE nid = %d", $node->riat_parent['id']));
        $depth = $depth + 1;
      }
      else {
        $depth = 0;
      }
      if (isset($node->chid_access_settings)) {
        riat_parent_access_save_node_access_context($node->nid, $node->chid_access_settings, $depth, $op);
      }
      elseif (isset($node->rid_access_settings)) {
        riat_parent_access_save_node_access_context($node->nid, $node->rid_access_settings, $depth, $op);
      }
      break;
    case 'delete':
      db_query("DELETE FROM {riat_parent_access_users} WHERE gid = %d", $node->nid);
      db_query("DELETE FROM {riat_parent_access_nid_settings} WHERE nid = %d", $node->nid);
      break;
  }
}

function riat_parent_access_save_node_access_context($nid, $setting, $depth, $op = 'insert') {
  $object = new stdClass();
  $object->nid = $nid;
  $object->setting = $setting;
  $object->depth = $depth;
  switch ($op) {
    case 'insert':
      drupal_write_record('riat_parent_access_nid_settings', $object);
      break;
    case 'update':
      drupal_write_record('riat_parent_access_nid_settings', $object, 'nid');
      break;
  }
}

function riat_parent_access_node_access_context($nid) {
  return db_result(db_query("SELECT setting FROM {riat_parent_access_nid_settings} WHERE nid = %d", $nid));
}

/**
 * Implementation of hook_node_grants().
 */

function riat_parent_access_node_grants($account, $op) {
  if ($op == 'view') {
    $grants['riat_all'][] = 0;
    if (user_access('access all parent nodes', $account)) {
      $grants['riat_access_perm'][] = 1;
    }
  }

  if (($op == 'update' || $op == 'delete') && user_access('edit all parent nodes', $account)) {
    $grants['riat_edit_perm'][] = 1;
  }

  $query = db_query('SELECT gid FROM {riat_parent_access_users} WHERE uid = %d', $account->uid);
  while ($result = db_fetch_object($query)) {
    $grants['riat_parent_access'][] = $result->gid;
  }
  
  return isset($grants) ? $grants : array();
}

/**
 * Implementation of hook_node_access_records().
 */

function riat_parent_access_node_access_records($node) {
  $grants = array();
  $chid = $node->chid ? $node->chid : $node->riat['chid'];
  $rid = $node->rid ? $node->rid : $node->riat['rid'];
  if ($chid && isset($node->chid_access_settings)) {
    // Default grants for Permissions
    $grants[] = array(
      'realm' => 'riat_access_perm',
      'gid' => TRUE,
      'grant_view' => TRUE,
      'grant_update' => FALSE,
      'grant_delete' => FALSE,
      'priority' => 0,
    );
    $grants[] = array(
      'realm' => 'riat_edit_perm',
      'gid' => TRUE,
      'grant_view' => TRUE,
      'grant_update' => TRUE,
      'grant_delete' => TRUE,
      'priority' => 0,
    );
    // If we aren't inheritting from our parent
    if ($node->chid_access_settings != 'inherit') {
      $grants[] = array(
        'realm' => 'riat_parent_access',
        'gid' => $node->nid,
        'grant_view' => TRUE,
        'grant_update' => FALSE,
        'grant_delete' => FALSE,
        'priority' => 0,
      );
    }
    else { // If we ARE inheritting from our parent
      $access = riat_parent_access_get_access($node->riat_parent['id']);
      $grants[] = array(
        'realm' => $access->realm,
        'gid' => $access->gid,
        'grant_view' => TRUE,
        'grant_update' => FALSE,
        'grant_delete' => FALSE,
        'priority' => 0,
      );
    }
  }
  elseif ($rid && isset($node->rid_access_settings)) { // If we have a rid, and our chid = 0 (top level parent item)
    // Set our default grants for perms
    $grants[] = array(
      'realm' => 'riat_access_perm',
      'gid' => TRUE,
      'grant_view' => TRUE,
      'grant_update' => FALSE,
      'grant_delete' => FALSE,
      'priority' => 0,
    );
    $grants[] = array(
      'realm' => 'riat_edit_perm',
      'gid' => TRUE,
      'grant_view' => TRUE,
      'grant_update' => TRUE,
      'grant_delete' => TRUE,
      'priority' => 0,
    );
    // If it's a private node
    if ($node->rid_access_settings == 'private') {
      $grants[] = array(
        'realm' => 'riat_parent_access',
        'gid' => $node->nid,
        'grant_view' => TRUE,
        'grant_update' => FALSE,
        'grant_delete' => FALSE,
        'priority' => 0,
      );
    }
    elseif ($node->rid_access_settings == 'public') { // Otherwise we'll put our own grant on it for everyone.
      $grants[] = array(
        'realm' => 'riat_all',
        'gid' => 0,
        'grant_view' => TRUE,
        'grant_update' => FALSE,
        'grant_delete' => FALSE,
        'priority' => 0,
      );
    }
  }
  return $grants;
}

function riat_parent_access_get_uids($gid) {
  $query = db_query("SELECT uid FROM {riat_parent_access_users} WHERE gid = %d", $gid);
  while ($result = db_fetch_object($query)) {
    $results[] = $result;
  }
  return $results;
}
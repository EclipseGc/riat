<?php

function riat_parent_child_riat_relationships() {
  return array(
    'parent_child' => array(
      'title' => t('Parent Child Relationship'),
      'description' => t('The parent child relationships denotes that one node will contain the others.  This is presented in a pure hierarchy in which no child ever has multiple parents, but may have multiple siblings.'),
      'module' => 'riat_parent_child',
      'add form' => 'riat_parent_child_add_form',
      'delete form' => 'riat_parent_child_delete_form',
      'delete validate' => 'riat_parent_child_delete_form_validate',
      'delete submit' => 'riat_parent_child_delete_form_submit',
      'hooks' => array(
        'nodeapi',
        'form_alter',
      ),
      'parent_entity' => array(
        'node',
      ),
      'child entity' => 'node',
    ),
  );
}

function riat_parent_child_ctools_plugin_directory($module, $plugin) {
  if ($module == 'context_admin' && $plugin == 'context_admin') {
    return 'plugins/'. $plugin;
  }
}

function riat_parent_child_add_form($form_state, $relationship, $process) {
  $form = array();
  $types = node_get_types();
  $options = array();
  foreach ($types as $key => $type) {
    $options[$key] = $type->name;
  }
  $form['types'] = array(
    '#type' => 'select',
    '#title' => t('Select a node type'),
    '#options' => $options,
    '#prefix' => '<div id="edit-parent-child-types-wrapper"><div id="edit-parent-child-types">',
    '#suffix' => '</div></div>',
  ) + $process;
  $form['one_or_many'] = array(
    '#type' => 'radios',
    '#title' => t('Relationship mapping'),
    '#options' => array(
      'many' => t('One to Many'),
      'one' => t('One to one'),
    ),
    '#default_value' => 'many',
    '#prefix' => '<div id="edit-parent-child-one-or-many-wrapper"><div id="edit-parent-child-one-or-many">',
    '#suffix' => '</div></div>',
  ) + $process;
  $form['one_or_many']['#process'][] = 'expand_radios';
  return $form;
}

function riat_parent_child_delete_form(&$form, &$form_state) {
  $item = $form['item']['#value'];
  $children = riat_load_relationship_tree($item->name, 'branch', $item->chid);
  if ($children->raw) {
    $form['children'] = array(
      '#type' => 'value',
      '#value' => $children->raw,
    );
    $form['riat_parent_child_delete_options'] = array(
      '#type' => 'radios',
      '#title' => t('Delete Options'),
      '#options' => array(
        'move' => t('Move descendents up a level'),
        'remove' => t('Remove descendents from tree'),
      ),
      '#description' => t('Please note that these changes will not affect pre-existing hierachy nodes, they will continue to exist, and will not be moved/removed in any instance.'),
      '#required' => TRUE,
    );
  }
}

function riat_parent_child_delete_form_validate(&$form, &$form_state) {
  if ($form_state['values']['riat_parent_child_delete_options'] == 'move') {
    $item = $form_state['values']['item'];
    if ($item->pchid) {
      $parent = db_select('riat_tree_definition', 'rtd')
        ->fields('rtd', array('object'))
        ->condition('chid', $item->pchid)
        ->condition('name', $item->name)
        ->execute()
        ->fetchField();
    }
    else {
      $parent = db_select('riat_definition', 'rd')
        ->fields('rd', array('object'))
        ->condition('name', $item->name)
        ->execute()
        ->fetchField();
    }
    $query = db_select('riat_tree_definition', 'rtd')
        ->fields('rtd', array('relationship'))
        ->condition('pchid', $item->chid)
        ->condition('name', $item->name)
        ->execute();
    if ($query) {
      foreach ($query as $result) {
        $relationship = riat_get_relationships($result->relationship);
        if (!in_array($parent, $relationship['parent_entity'])) {
          form_set_error('riat_parent_child_delete_options', t('One or more children of this object are not compatible children of this object\'s parent'));
        }
      }
    }
  }
}

function riat_parent_child_delete_form_submit(&$form, &$form_state) {
  if ($form_state['values']['riat_parent_child_delete_options'] == 'remove') {
    foreach ($form_state['values']['children'] as $name_chid => $child) {
      riat_relationship_chid_delete($name_chid);
    }
  }
  if ($form_state['values']['riat_parent_child_delete_options'] == 'move') {
    $item = $form_state['values']['item'];
    db_update('riat_tree_definition')
      ->fields(array('pchid' => $item->pchid))
      ->condition('pchid', $item->chid)
      ->condition('name', $item->name)
      ->execute();
    $children = $form_state['values']['children'];
    foreach ($children as $child) {
      db_update('riat_tree_definition')
        ->fields(array('depth' => ($child->depth - 1)))
        ->condition('chid', $child->chid)
        ->condition('name', $child->name)
        ->execute();
    }
  }
}

function riat_parent_child_form_alter(&$form, $form_state, $form_id) {

}
